{"version":3,"sources":["Actions/remindersAction.js","Reducers/reminderReducer.js","Reducers/index.js","Store/index.js","serviceWorker.js","Hoc/MainLayout/index.js","Components/Day/index.jsx","Containers/Dashboard/index.jsx","Config/Routes.jsx","index.js"],"names":["ACTIONS","initialState","remindersReducer","state","arguments","length","undefined","action","type","payload","rootReducer","combineReducers","reminderReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","CreateStore","createStore","applyMiddleware","thunk","Boolean","location","hostname","match","MainLayout","props","react_default","a","createElement","children","Day","TableCell_default","className","day","Dashboard","date","moment","weekdays","weekdaysShort","firstDayOfMonth","_this","startOf","format","customDay","currentDays","blankDays","monthDays","i","push","src_Components_Day","key","d","daysInMonth","totalDays","concat","rows","cells","forEach","row","insertRow","slice","map","TableRow_default","classes","this","_this$state","Grid_default","container","spacing","Paper_default","root","Table_default","table","TableHead_default","component","scope","colSpan","align","TableBody_default","Component","withStyles","theme","width","marginTop","unit","overflowX","minWidth","Routes","console","log","react_router_dom","Hoc_MainLayout","react_router","path","exact","store","ReactDOM","render","es","Config_Routes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e193b8a1.chunk.js","sourcesContent":["export const ACTIONS = {\n  CREATE: 'reminders/create',\n};\n\nexport const createReminder = reminder => ({ type: ACTIONS.CREATE, ...reminder });\n","import { ACTIONS } from '../Actions/remindersAction';\n\nconst initialState = {\n\n};\n\nconst remindersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTIONS.CREATE:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default remindersReducer;","import { combineReducers } from 'redux';\nimport reminderReducer from './reminderReducer';\n\nconst rootReducer = combineReducers({\n  reminderReducer,\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../Reducers';\n// Note: this API requires redux@>=3.1.0\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst CreateStore = initialState =>\n  createStore(rootReducer, initialState, composeEnhancers(applyMiddleware(thunk)));\n\nexport default CreateStore;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst MainLayout = props => <div> {props.children} </div>;\n\nexport default MainLayout;","import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport './index.sass';\n\nconst Day = props => (\n  <TableCell>\n    <div className=\"td-container\">{props.day}</div>\n  </TableCell>\n);\n\nexport default Day;","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport moment from 'moment';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Day from '../../Components/Day';\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing.unit * 3,\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 700,\n  },\n});\n\nclass Dashboard extends Component {\n  state ={\n    date: moment(),\n    weekdays : moment.weekdaysShort(),\n  }\n\n  firstDayOfMonth = () => {\n    const { date } = this.state;\n    return moment(date).startOf('month').format('d');\n  }\n\n  customDay = day =>  <div>{day}</div>;\n\n  currentDays = () => {\n    const { date } = this.state;\n\n    const blankDays = [];\n    const monthDays = [];\n    for (let i = 0; i < this.firstDayOfMonth(); i++) {\n        blankDays.push( <Day key={i*10} day=\"\"/>);\n    }\n    for (let d = 1; d <= date.daysInMonth(); d++) {\n        monthDays.push(\n            <Day key={d} day={d}/>\n        );\n    }\n\n    var totalDays = [...blankDays, ...monthDays];\n    const rows = [];\n    let cells = [];\n    totalDays.forEach((row, i) => {\n        if ((i % 7) !== 0) {\n            cells.push(row);\n        } else {\n            const insertRow = cells.slice();\n            rows.push(insertRow);\n            cells = [];\n            cells.push(row);\n        }\n        if (i === totalDays.length - 1) {\n            let insertRow = cells.slice();\n            rows.push(insertRow);\n        }\n    });\n    return rows.map((d, i) => (<TableRow key={i}>{d}</TableRow>));\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { weekdays, date } = this.state;\n    return (\n      <Grid container spacing={0}>\n       <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell component=\"th\" scope=\"row\" colSpan=\"7\" align=\"center\">\n              {date.format(\"MMMM\")}{\"\"}{date.format(\"Y\")}\n            </TableCell>\n          </TableRow>\n        </TableHead> \n        <TableHead>\n          <TableRow>\n            {weekdays.map((day, i) => (\n                <TableCell key={i} component=\"th\" scope=\"row\">\n                  {day}\n                </TableCell>\n            ))}\n          </TableRow>\n        </TableHead> \n        <TableBody>\n            {this.currentDays()}\n        </TableBody>\n      </Table>\n    </Paper>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Dashboard);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport MainLayout from '../Hoc/MainLayout';\nimport Dashboard from '../Containers/Dashboard';\n\nclass Routes extends Component {\n  componentDidMount() {\n    console.log('assadasdasddsdsadssddsd');\n  }\n  render() {\n    return (\n      <Router>\n        <MainLayout>\n          <Switch>\n            <Route path=\"/\" exact component={Dashboard} />\n          </Switch>\n        </MainLayout>\n      </Router>\n    );\n  }\n}\nexport default Routes;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.sass';\nimport CreateStore from './Store';\nimport * as serviceWorker from './serviceWorker';\nimport Routes from './Config/Routes';\n\nconst store = CreateStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <Routes />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}